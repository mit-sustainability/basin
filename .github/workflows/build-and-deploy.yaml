name: Build and Deploy
on:
  push:
    branches:
      - main
      - scope3_construction

permissions:
  id-token: write
  contents: read
jobs:
  Run-Unit-Tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Configure AWS Authentication
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::860551228838:role/github-action-access
          aws-region: us-east-1
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
      - name: Install dependencies
        run: |
          make setup-dev
      - name: Run tests
        working-directory: ./orchestrator
        env:
          PG_WAREHOUSE_HOST: ${{ secrets.PG_WAREHOUSE_HOST }}
          PG_USER: sustain
          PG_PASSWORD: ${{ secrets.PG_PASSWORD }}
        run: |
          DAGSTER_DBT_PARSE_PROJECT_ON_LOAD=1 pytest tests
  Build-And-Push-Dagster-Image:
    runs-on: ubuntu-latest
    needs: Run-Unit-Tests
    strategy:
      matrix:
        python-version: ["3.11"]
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Authentication
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::860551228838:role/github-action-access
          aws-region: us-east-1
          role-session-name: GitHub_to_AWS_via_FederatedOIDC

      - name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: mitos2023
          IMAGE_TAG: basin_0.0.4
          PG_WAREHOUSE_HOST: ${{ secrets.PG_WAREHOUSE_HOST }}
          PG_USER: sustain
          PG_PASSWORD: ${{ secrets.PG_PASSWORD }}
        run: |
          echo ${PWD}
          DOCKER_BUILDKIT=1 docker build --build-arg pg_pass=$PG_PASSWORD --build-arg pg_host=$PG_WAREHOUSE_HOST --build-arg pg_user=$PG_USER --file ./orchestrator/Dockerfile -t $REGISTRY/$REPOSITORY:$IMAGE_TAG . --no-cache
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Deploy to EC2 and Start the service
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOSTNAME: ${{secrets.SSH_HOST}}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          scp -o StrictHostKeyChecking=no -i private_key docker-compose.yaml ubuntu@${HOSTNAME}:/home/ubuntu/
          ssh -o StrictHostKeyChecking=no -i private_key ubuntu@${HOSTNAME} '
            # Load environment var from Secret Manager
            secret=$(aws secretsmanager get-secret-value --secret-id prod/dagster/envvars --query SecretString --output text) &&
            echo $secret | jq -r "to_entries|map(\"\(.key)=\(.value)\")|.[]" > .env &&
            source .env &&
            # Pull the latest image and restart the service
            docker-compose down &&
            docker system prune -a --force &&
            docker-compose pull --policy=always &&
            docker-compose up -d
            '
      - run: echo "üçè This job's status is ${{ job.status }}."
